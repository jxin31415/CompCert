Lemma transf_program_match : forall p tp, transf_program p = OK tp -> match_prog p tp .
Proof.
   intros p tp H. eapply match_transform_partial_program. eauto.
Qed.
Remark diff_same : forall s, diff s s = nil .
Proof.
   intro s. induction s as [ | [ v i ] s ]. 
    - simpl. auto.
    - simpl. rewrite Pos.compare_refl. rewrite dec_eq_true. auto.
Qed.
Remark delta_state_same : forall s, delta_state s s = ( nil, nil ) .
Proof.
   intro s. destruct s as [  a | ]. 
    - simpl. rewrite ! diff_same. auto.
    - simpl. auto.
Qed.
Lemma transf_code_match : forall lm c before, match_code c ( transf_code lm before c ) .
Proof.
   intros lm. intros c. destruct c as [  | c i ]. 
    - intros before. simpl. constructor.
    - intros before. simpl. assert ( DEFAULT : forall before after, match_code ( i :: c ) ( i :: add_delta_ranges before after ( transf_code lm after c ) ) ). 
      -- intros before0 after. constructor. apply REC.
      -- destruct i as [  DEFAULT m t z s | DEFAULT t z s m | DEFAULT m l o | DEFAULT m0 l a m | DEFAULT m0 l a m | DEFAULT s0 s | DEFAULT s0 s | DEFAULT b l e | DEFAULT l | DEFAULT l | DEFAULT l0 l c0 | DEFAULT l m | DEFAULT ]. 
        --- auto.
        --- auto.
        --- auto.
        --- auto.
        --- auto.
        --- auto.
        --- auto.
        --- auto.
        --- auto.
        --- destruct c as [  DEFAULT | DEFAULT i ]. 
          ---- auto.
          ---- destruct i as [  DEFAULT m t z s | DEFAULT t z s m | DEFAULT m l0 o | DEFAULT m0 l0 a m | DEFAULT m0 l0 a m | DEFAULT s0 s | DEFAULT s0 s | DEFAULT b l0 e | DEFAULT l0 | DEFAULT l0 | DEFAULT l1 l0 c0 | DEFAULT l0 m | DEFAULT ]. 
            ----- auto.
            ----- auto.
            ----- auto.
            ----- auto.
            ----- auto.
            ----- auto.
            ----- auto.
            ----- auto.
            ----- set ( after := get_label l0 lm ). set ( c1 := Llabel l0 :: add_delta_ranges before after ( transf_code lm after c ) ). replace c1 with ( add_delta_ranges before before c1 ). 
              ------ constructor. constructor. apply REC.
              ------ unfold add_delta_ranges. rewrite delta_state_same. auto.
            ----- auto.
            ----- auto.
            ----- auto.
            ----- auto.
        --- auto.
        --- auto.
        --- auto.
Qed.
Lemma transf_function_match : forall f tf, transf_function f = OK tf -> match_function f tf .
Proof.
   unfold transf_function. intros f tf H. destruct ( ana_function f ) as [ lm| ]. 
    - inv H. constructor. apply transf_code_match.
    - inv H.
Qed.
Remark find_label_add_delta_ranges : forall lbl c before after, find_label lbl ( add_delta_ranges before after c ) = find_label lbl c .
Proof.
   intros lbl c before after. unfold add_delta_ranges. destruct ( delta_state before after ) as [ killed born ]. induction killed as [ | [ v i ] l ]. 
    - simpl. induction born as [ | [ v i ] l ]. 
      -- simpl. auto.
      -- simpl. auto.
    - simpl. auto.
Qed.
Lemma find_label_match_rec : forall lbl c' c tc, match_code c tc -> find_label lbl c = Some c' -> exists before after tc', find_label lbl tc = Some ( add_delta_ranges before after tc' ) /\ match_code c' tc' .
Proof.
   induction 1. 
    - simpl. intros H. discriminate.
    - simpl. intros H0. destruct ( is_label lbl i ) as [  H0 | H0 ]. 
      -- inv H0. econstructor. econstructor. econstructor. eauto.
      -- rewrite find_label_add_delta_ranges. auto.
Qed.
Lemma find_label_match : forall f tf lbl c, match_function f tf -> find_label lbl f. ( fn_code ) = Some c -> exists before after tc, find_label lbl tf. ( fn_code ) = Some ( add_delta_ranges before after tc ) /\ match_code c tc .
Proof.
   intros f tf lbl c H H0. inv H. eapply find_label_match_rec. 
    - eauto.
    - eauto.
Qed.
Lemma set_state_1 : forall v i s, In ( v, i ) ( set_state v i s ) .
Proof.
   intros v i s. induction s as [ | [ v' i' ] s ]. 
    - simpl. auto.
    - simpl. destruct ( Pos.compare v v' ) as [  | | ]. 
      -- simpl. auto.
      -- simpl. auto.
      -- simpl. auto.
Qed.
Lemma set_state_2 : forall v i v' i' s, v' <> v -> In ( v', i' ) s -> In ( v', i' ) ( set_state v i s ) .
Proof.
   intros v i v' i' s. induction s as [ | [ v1 i1 ] s ]. 
    - simpl. intros H H0. contradiction.
    - simpl. intros H H0. destruct ( Pos.compare_spec v v1 ) as [  H1 | H1 | H1 ]. 
      -- simpl. subst v1. destruct H0 as [  H0 | H0 ]. 
        --- congruence.
        --- auto.
      -- simpl. auto.
      -- simpl. destruct H0 as [  H0 | H0 ]. 
        --- auto.
        --- auto.
Qed.
Lemma set_state_3 : forall v i v' i' s, wf_avail s -> In ( v', i' ) ( set_state v i s ) -> ( v' = v /\ i' = i ) \/ ( v' <> v /\ In ( v', i' ) s ) .
Proof.
   induction 1. 
    - simpl. intros H. intuition congruence.
    - simpl. intros H1. destruct ( Pos.compare_spec v v0 ) as [  H2 H1 | H2 H1 | H2 H1 ]. 
      -- simpl in H1. subst v0. destruct H1 as [  H1 | H1 ]. 
        --- inv H1. auto.
        --- right. split. 
          ---- apply not_eq_sym. apply Plt_ne. eapply H. eauto.
          ---- auto.
      -- simpl in H1. destruct H1 as [  H1 | H1 ]. 
        --- inv H1. auto.
        --- destruct H1 as [  H1 | H1 ]. 
          ---- inv H1. right. split. 
            ----- apply not_eq_sym. apply Plt_ne. auto.
            ----- auto.
          ---- right. split. 
            ----- apply not_eq_sym. apply Plt_ne. apply Plt_trans with v0. 
              ------ eauto.
              ------ eauto.
            ----- auto.
      -- simpl in H1. destruct H1 as [  H1 | H1 ]. 
        --- inv H1. right. split. 
          ---- apply Plt_ne. auto.
          ---- auto.
        --- destruct IHwf_avail as [ A | [ A B ] ]. 
          ---- auto.
          ---- auto.
          ---- auto.
Qed.
Lemma wf_set_state : forall v i s, wf_avail s -> wf_avail ( set_state v i s ) .
Proof.
   induction 1. 
    - simpl. constructor. 
      -- red. simpl. tauto.
      -- constructor.
    - simpl. destruct ( Pos.compare_spec v v0 ) as [  H1 | H1 | H1 ]. 
      -- subst v0. constructor. 
        --- auto.
        --- auto.
      -- constructor. 
        --- red. simpl. intros v' i' H2. destruct H2 as [  H2 | H2 ]. 
          ---- inv H2. auto.
          ---- apply Plt_trans with v0. 
            ----- eauto.
            ----- eauto.
        --- constructor. 
          ---- auto.
          ---- auto.
      -- constructor. 
        --- red. intros v' i' H2. exploit set_state_3. 
          ---- eexact H0.
          ---- eauto.
          ---- intros [ [ A B ] | [ A B ] ]. 
            ----- subst v' i'. eauto.
            ----- eauto.
        --- eauto.
Qed.
Lemma remove_state_1 : forall v i s, wf_avail s -> ~ In ( v, i ) ( remove_state v s ) .
Proof.
   induction 1. 
    - simpl. red. intros H. auto.
    - simpl. red. intros H1. destruct ( Pos.compare_spec v v0 ) as [  H2 H1 | H2 H1 | H2 H1 ]. 
      -- subst v0. elim ( Plt_strict v ). eauto.
      -- destruct H1 as [  H1 | H1 ]. 
        --- inv H1. elim ( Plt_strict v ). eauto.
        --- elim ( Plt_strict v ). apply Plt_trans with v0. 
          ---- eauto.
          ---- eauto.
      -- destruct H1 as [  H1 | H1 ]. 
        --- inv H1. elim ( Plt_strict v ). eauto.
        --- tauto.
Qed.
Lemma remove_state_2 : forall v v' i' s, v' <> v -> In ( v', i' ) s -> In ( v', i' ) ( remove_state v s ) .
Proof.
   intros v v' i' s. induction s as [ | [ v1 i1 ] s ]. 
    - simpl. intros H H0. auto.
    - simpl. intros H H0. destruct ( Pos.compare_spec v v1 ) as [  H1 | H1 | H1 ]. 
      -- subst v1. destruct H0 as [  H0 | H0 ]. 
        --- congruence.
        --- auto.
      -- simpl. auto.
      -- simpl. destruct H0 as [  H0 | H0 ]. 
        --- auto.
        --- auto.
Qed.
Lemma remove_state_3 : forall v v' i' s, wf_avail s -> In ( v', i' ) ( remove_state v s ) -> v' <> v /\ In ( v', i' ) s .
Proof.
   induction 1. 
    - simpl. intros H. contradiction.
    - simpl. intros H1. destruct ( Pos.compare_spec v v0 ) as [  H2 H1 | H2 H1 | H2 H1 ]. 
      -- simpl in H1subst v0. split. 
        --- apply not_eq_sym. apply Plt_ne. eauto.
        --- auto.
      -- simpl in H1. destruct H1 as [  H1 | H1 ]. 
        --- inv H1. split. 
          ---- apply not_eq_sym. apply Plt_ne. eauto.
          ---- auto.
        --- split. 
          ---- apply not_eq_sym. apply Plt_ne. apply Plt_trans with v0. 
            ----- eauto.
            ----- eauto.
          ---- auto.
      -- simpl in H1. destruct H1 as [  H1 | H1 ]. 
        --- inv H1. split. 
          ---- apply Plt_ne. auto.
          ---- auto.
        --- destruct IHwf_avail as [ A B ]. 
          ---- auto.
          ---- auto.
Qed.
Lemma wf_remove_state : forall v s, wf_avail s -> wf_avail ( remove_state v s ) .
Proof.
   induction 1. 
    - simpl. constructor.
    - simpl. destruct ( Pos.compare_spec v v0 ) as [  H1 | H1 | H1 ]. 
      -- auto.
      -- constructor. 
        --- auto.
        --- auto.
      -- constructor. 
        --- red. intros v' i' H2. exploit remove_state_3. 
          ---- eexact H0.
          ---- eauto.
          ---- intros [ A B ]. eauto.
        --- auto.
Qed.
Lemma wf_filter : forall pred s, wf_avail s -> wf_avail ( List.filter pred s ) .
Proof.
   induction 1. 
    - simpl. constructor.
    - simpl. destruct ( pred ( v, i ) ) eqn : P. 
      -- constructor. 
        --- red. intros v' i' H1. apply filter_In in H1. destruct H1 as [  H2 H1 ]. eauto.
        --- auto.
      -- auto.
Qed.
Lemma join_1 : forall v i s1, wf_avail s1 -> forall s2, wf_avail s2 -> In ( v, i ) s1 -> In ( v, i ) s2 -> In ( v, i ) ( join s1 s2 ) .
Proof.
   induction 1. 
    - simpl. try tauto.
    - simpl. induction 1. 
      -- simpl. intros I1 I2. auto.
      -- simpl. intros I1 I2. destruct I1, I2 as [  H4 H3 | H4 H3 | H4 H3 | H4 H3 ]. 
        --- inv H3. inv H4. rewrite Pos.compare_refl. rewrite dec_eq_true. auto with coqlib.
        --- inv H3. assert ( L : Plt v1 v ) by eauto. apply Pos.compare_gt_iff in L. rewrite L. auto.
        --- inv H4. assert ( L : Plt v0 v ) by eauto. apply Pos.compare_lt_iff in L. rewrite L. apply IHwf_avail. 
          ---- constructor. 
            ----- auto.
            ----- auto.
          ---- auto.
          ---- auto with coqlib.
        --- destruct ( Pos.compare v0 v1 ) as [  | | ]. 
          ---- destruct ( eq_debuginfo i0 i1 ) as [  e | n ]. 
            ----- auto with coqlib.
            ----- auto with coqlib.
          ---- apply IHwf_avail. 
            ----- constructor. 
              ------ auto.
              ------ auto.
            ----- auto with coqlib.
            ----- auto with coqlib.
          ---- eauto.
Qed.
Lemma join_2 : forall v i s1, wf_avail s1 -> forall s2, wf_avail s2 -> In ( v, i ) ( join s1 s2 ) -> In ( v, i ) s1 /\ In ( v, i ) s2 .
Proof.
   induction 1. 
    - simpl. try tauto.
    - simpl. induction 1. 
      -- simpl. intros I. try tauto.
      -- simpl. intros I. destruct ( Pos.compare_spec v0 v1 ) as [  H3 I | H3 I | H3 I ]. 
        --- subst v1. destruct ( eq_debuginfo i0 i1 ) as [  I e | I n ]. 
          ---- subst i1. destruct I as [  H3 | H3 ]. 
            ----- auto.
            ----- exploit IHwf_avail. 
              ------ eauto.
              ------ eauto.
              ------ tauto.
          ---- exploit IHwf_avail. 
            ----- eauto.
            ----- eauto.
            ----- tauto.
        --- exploit ( IHwf_avail ( ( v1, i1 ) :: s0 ) ). 
          ---- constructor. 
            ----- auto.
            ----- auto.
          ---- eauto.
          ---- simpl. tauto.
        --- exploit IHwf_avail0. 
          ---- eauto.
          ---- tauto.
Qed.
Lemma wf_join : forall s1, wf_avail s1 -> forall s2, wf_avail s2 -> wf_avail ( join s1 s2 ) .
Proof.
   induction 1. 
    - simpl. induction 1. 
      -- try constructor.
      -- try constructor.
    - simpl. induction 1. 
      -- try constructor.
      -- destruct ( Pos.compare_spec v v0 ) as [  H3 | H3 | H3 ]. 
        --- subst v0. destruct ( eq_debuginfo i i0 ) as [  e | n ]. 
          ---- constructor. 
            ----- red. intros v' i' H3. apply join_2 in H3. 
              ------ destruct H3 as [  H4 H3 ]. eauto.
              ------ auto.
              ------ auto.
            ----- auto.
          ---- auto.
        --- apply IHwf_avail. constructor. 
          ---- auto.
          ---- auto.
        --- apply IHwf_avail0.
Qed.
Lemma symbols_preserved : forall ( s : ident ), Genv.find_symbol tge s = Genv.find_symbol ge s .
Proof.
   intros s. apply ( Genv.find_symbol_match TRANSF ).
Qed.
Lemma functions_translated : forall ( v : val ) ( f : fundef ), Genv.find_funct ge v = Some f -> exists tf, Genv.find_funct tge v = Some tf /\ transf_fundef f = OK tf .
Proof.
   intros v f H. apply ( Genv.find_funct_transf_partial TRANSF ). auto.
Qed.
Lemma function_ptr_translated : forall ( b : block ) ( f : fundef ), Genv.find_funct_ptr ge b = Some f -> exists tf, Genv.find_funct_ptr tge b = Some tf /\ transf_fundef f = OK tf .
Proof.
   intros b f H. apply ( Genv.find_funct_ptr_transf_partial TRANSF ). auto.
Qed.
Lemma sig_preserved : forall f tf, transf_fundef f = OK tf -> funsig tf = funsig f .
Proof.
   unfold transf_fundef, transf_partial_fundef. intros f tf H. destruct f as [  H f | H e ]. 
    - monadInv H. exploit transf_function_match. 
      -- eauto.
      -- intros M. inv M. auto.
    - inv H. reflexivity.
Qed.
Lemma find_function_translated : forall ros ls f, find_function ge ros ls = Some f -> exists tf, find_function tge ros ls = Some tf /\ transf_fundef f = OK tf .
Proof.
   unfold find_function. intros ros ls f H. destruct ros as [  H m | H i ]. 
    - apply functions_translated. auto.
    - rewrite symbols_preserved. destruct ( Genv.find_symbol ge i ) as [  H b | H ]. 
      -- apply function_ptr_translated. auto.
      -- congruence.
Qed.
Lemma can_eval_safe_arg : forall ( rs : locset ) sp m ( a : builtin_arg loc ), safe_builtin_arg a -> exists v, eval_builtin_arg tge rs sp m a v .
Proof.
   intros rs sp m a. induction a. 
    - simpl. intros H. try ( econstructor ; now eauto with barg ).
    - simpl. intros H. try ( econstructor ; now eauto with barg ).
    - simpl. intros H. try ( econstructor ; now eauto with barg ).
    - simpl. intros H. try ( econstructor ; now eauto with barg ).
    - simpl. intros H. try ( econstructor ; now eauto with barg ).
    - simpl. intros H. try contradiction.
    - simpl. intros H. try contradiction.
    - simpl. intros H. try contradiction.
    - simpl. intros H. try contradiction.
    - simpl. intros H. destruct H as [ S1 S2 ]. destruct ( IHa1 S1 ) as [ v1 E1 ]. destruct ( IHa2 S2 ) as [ v2 E2 ]. exists ( Val.longofwords v1 v2 ). auto with barg.
    - simpl. intros H. try contradiction.
Qed.
Lemma eval_add_delta_ranges : forall s f sp c rs m before after, star step tge ( State s f sp ( add_delta_ranges before after c ) rs m ) E0 ( State s f sp c rs m ) .
Proof.
   intros s f sp c rs m before after. unfold add_delta_ranges. destruct ( delta_state before after ) as [ killed born ]. induction killed as [ | [ v i ] l ]. 
    - simpl. induction born as [ | [ v i ] l ]. 
      -- simpl. apply star_refl.
      -- simpl. destruct i as [ a SAFE ]. simpl. exploit can_eval_safe_arg. 
        --- eauto.
        --- intros [ v1 E1 ]. eapply star_step with ( t2 := E0 ). 
          ---- econstructor. 
            ----- constructor. 
              ------ eexact E1.
              ------ constructor.
            ----- simpl. constructor.
            ----- simpl. auto.
          ---- eauto.
          ---- eauto.
    - simpl. eapply star_step with ( t2 := E0 ). 
      -- econstructor. 
        --- constructor.
        --- simpl. constructor.
        --- simpl. auto.
      -- eauto.
      -- eauto.
Qed.
Lemma parent_locset_match : forall s ts, list_forall2 match_stackframes s ts -> parent_locset ts = parent_locset s .
Proof.
   induction 1. 
    - simpl. auto.
    - simpl. inv H. auto.
Qed.
Theorem transf_step_correct : forall s1 t s2, step ge s1 t s2 -> forall ts1 ( MS : match_states s1 ts1 ), exists ts2, plus step tge ts1 t ts2 /\ match_states s2 ts2 .
Proof.
   induction 1. 
    - intros ts1 MS. inv MS. try ( inv TRC ). custom0 plus_left eval_add_delta_ranges. constructor. auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). custom1 plus_left eval_add_delta_ranges. constructor. auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). econstructor. split. 
      -- eapply plus_left. 
        --- econstructor. 
          ---- instantiate ( 1 := v ). rewrite <- H. apply eval_operation_preserved. exact symbols_preserved.
          ---- eauto.
        --- apply eval_add_delta_ranges.
        --- traceEq.
      -- constructor. 
        --- auto.
        --- auto.
        --- auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). econstructor. split. 
      -- eapply plus_left. 
        --- eapply exec_Lload with ( a := a ). 
          ---- rewrite <- H. apply eval_addressing_preserved. exact symbols_preserved.
          ---- eauto.
          ---- eauto.
        --- apply eval_add_delta_ranges.
        --- traceEq.
      -- constructor. 
        --- auto.
        --- auto.
        --- auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). econstructor. split. 
      -- eapply plus_left. 
        --- eapply exec_Lstore with ( a := a ). 
          ---- rewrite <- H. apply eval_addressing_preserved. exact symbols_preserved.
          ---- eauto.
          ---- eauto.
        --- apply eval_add_delta_ranges.
        --- traceEq.
      -- constructor. 
        --- auto.
        --- auto.
        --- auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). exploit find_function_translated. 
      -- eauto.
      -- intros ( tf' & A & B ). econstructor. split. 
        --- apply plus_one. econstructor. 
          ---- eexact A.
          ---- symmetry. apply sig_preserved. auto.
        --- constructor. 
          ---- constructor. 
            ----- constructor. 
              ------ auto.
              ------ auto.
            ----- auto.
          ---- auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). exploit find_function_translated. 
      -- eauto.
      -- intros ( tf' & A & B ). exploit parent_locset_match. 
        --- eauto.
        --- intros PLS. econstructor. split. 
          ---- apply plus_one. econstructor. 
            ----- eauto.
            ----- rewrite PLS. eexact A.
            ----- symmetry. apply sig_preserved. auto.
            ----- inv TRF. eauto.
          ---- rewrite PLS. constructor. 
            ----- auto.
            ----- auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). econstructor. split. 
      -- eapply plus_left. 
        --- econstructor. 
          ---- eapply eval_builtin_args_preserved with ( ge1 := ge ). 
            ----- exact symbols_preserved.
            ----- eauto.
          ---- eapply external_call_symbols_preserved. 
            ----- apply senv_preserved.
            ----- eauto.
          ---- eauto.
        --- apply eval_add_delta_ranges.
        --- traceEq.
      -- constructor. 
        --- auto.
        --- auto.
        --- auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). econstructor. split. 
      -- eapply plus_left. 
        --- constructor.
        --- apply eval_add_delta_ranges.
        --- traceEq.
      -- constructor. 
        --- auto.
        --- auto.
        --- auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). exploit find_label_match. 
      -- eauto.
      -- eauto.
      -- intros ( before' & after' & tc' & A & B ). econstructor. split. 
        --- eapply plus_left. 
          ---- constructor. eauto.
          ---- apply eval_add_delta_ranges.
          ---- traceEq.
        --- constructor. 
          ---- auto.
          ---- auto.
          ---- auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). exploit find_label_match. 
      -- eauto.
      -- eauto.
      -- intros ( before' & after' & tc' & A & B ). econstructor. split. 
        --- eapply plus_left. 
          ---- eapply exec_Lcond_true. 
            ----- eauto.
            ----- eauto.
            ----- eauto.
          ---- apply eval_add_delta_ranges.
          ---- traceEq.
        --- constructor. 
          ---- auto.
          ---- auto.
          ---- auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). econstructor. split. 
      -- eapply plus_left. 
        --- eapply exec_Lcond_false. 
          ---- auto.
          ---- auto.
        --- apply eval_add_delta_ranges.
        --- traceEq.
      -- constructor. 
        --- auto.
        --- auto.
        --- auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). exploit find_label_match. 
      -- eauto.
      -- eauto.
      -- intros ( before' & after' & tc' & A & B ). econstructor. split. 
        --- eapply plus_left. 
          ---- econstructor. 
            ----- eauto.
            ----- eauto.
            ----- eauto.
            ----- eauto.
          ---- apply eval_add_delta_ranges.
          ---- reflexivity.
        --- constructor. 
          ---- auto.
          ---- auto.
          ---- auto.
    - intros ts1 MS. inv MS. try ( inv TRC ). econstructor. split. 
      -- apply plus_one. constructor. inv TRF. eauto.
      -- rewrite ( parent_locset_match _ _ STACKS ). constructor. auto.
    - intros ts1 MS. inv MS. monadInv H7. rename x into tf. assert ( MF : match_function f tf ) by ( apply transf_function_match ; auto ). inversion MF. econstructor. split. 
      -- apply plus_one. constructor. 
        --- simpl. eauto.
        --- reflexivity.
      -- constructor. 
        --- auto.
        --- auto.
        --- auto.
    - intros ts1 MS. inv MS. monadInv H8. econstructor. split. 
      -- apply plus_one. econstructor. 
        --- eauto.
        --- eapply external_call_symbols_preserved. 
          ---- apply senv_preserved.
          ---- eauto.
        --- eauto.
      -- constructor. auto.
    - intros ts1 MS. inv MS. inv H3. inv H1. econstructor. split. 
      -- eapply plus_left. 
        --- econstructor.
        --- apply eval_add_delta_ranges.
        --- traceEq.
      -- constructor. 
        --- auto.
        --- auto.
        --- auto.
Qed.
Lemma transf_initial_states : forall st1, initial_state prog st1 -> exists st2, initial_state tprog st2 /\ match_states st1 st2 .
Proof.
   intros st1 H. inversion H. exploit function_ptr_translated. 
    - eauto.
    - intros [ tf [ A B ] ]. exists ( Callstate nil tf ( Locmap.init Vundef ) m0 ). split. 
      -- econstructor. 
        --- eapply ( Genv.init_mem_transf_partial TRANSF ). eauto.
        --- rewrite ( match_program_main TRANSF ), symbols_preserved. eauto.
        --- eauto.
        --- rewrite <- H3. apply sig_preserved. auto.
      -- constructor. 
        --- constructor.
        --- auto.
Qed.
Lemma transf_final_states : forall st1 st2 r, match_states st1 st2 -> final_state st1 r -> final_state st2 r .
Proof.
   intros st1 st2 r H H0. inv H0. inv H. inv H5. econstructor. eauto.
Qed.
Theorem transf_program_correct : forward_simulation ( semantics prog ) ( semantics tprog ) .
Proof.
   eapply forward_simulation_plus. 
    - apply senv_preserved.
    - eexact transf_initial_states.
    - eexact transf_final_states.
    - eexact transf_step_correct.
Qed.

Ltac custom0 H0 H10 :=  econstructor; [split; [eapply H0; [ | apply H10 | traceEq | .. ] | constructor; [auto | auto | auto | .. ] | .. ] | .. ].
Ltac custom1 H0 H10 :=  econstructor; [split; [eapply H0; [ | apply H10 | traceEq | .. ] | constructor; [auto | auto | auto | .. ] | .. ] | .. ].